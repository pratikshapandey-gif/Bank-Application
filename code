package Multithreading;

class Client
{
	int availableBalance = 20000;
	int withdrawBalance;
	
	public Client(int withdrawBalance)
	{
		this.withdrawBalance = withdrawBalance;
	}
}

public class BankingApplication 
{
	public static void main(String[] args) 
	{
		Client c1 = new Client(20000);
		
        Runnable r1 = ()->
        {
          String name = null;
          if(c1.withdrawBalance <= c1.availableBalance)
          {
        	  name = Thread.currentThread().getName();
        	  System.out.println(c1.withdrawBalance+" amount withdraw by :"+name);
        	  c1.availableBalance = c1.availableBalance - c1.withdrawBalance;
          }
          else
          {
        	  name = Thread.currentThread().getName();
        	  System.err.println("Sorry "+name+ " insufficient balance");
          }    
        
        };
        
         Thread t1 = new Thread(r1,"Virat");
         Thread t2 = new Thread(r1,"Rohit");
         
         t1.start(); t2.start();

	}
}/*class Customer
{  
     int balance = 10000;    

	public synchronized void withdraw(int amount) //amount = 15000   
	{  
		System.out.println("going to withdraw...");    
		if(balance < amount)
			{  
				System.out.println("Less balance; waiting for deposit...");  
					try
					{
						wait();  //waiting and releasing the lock
					}
					catch(Exception e){}  
			}  
		balance  = balance - amount;
		System.out.println("withdraw completed..."+balance+" is remaining balance"); 
	}    

	public synchronized void deposit(int amount)   //amount = 9000
		{  
			System.out.println("going to deposit...");  
			balance = balance + amount;  
			System.out.println("Balance after deposit is :"+balance);
			System.out.println("deposit completed... ");  
			notify();  
		}  
}   
public class InterThreadBalance
{  
public static void main(String args[])
	{  
      Customer c = new Customer();    //lock is created here

		Thread son = new Thread()  //anonymous class concept
		{  
			@Override
			public void run()
			{
				c.withdraw(15000);
			}  
		};
		son.start(); 		

		Thread father = new Thread()
		{  
			public void run()
			{
				c.deposit(9000);
			}  
		};
		
		father.start();  
    }
}  */
